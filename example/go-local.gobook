[{"content":"package main\n\nimport (\n\t\"fmt\"\n\t\"time\"\n)\n\nfunc main() {\n\tfmt.Println(\"Hello world!\")\n\n\tfor i := 0; i < 5; i++ {\n\t\ttime.Sleep(time.Second)\n\n\t\tfmt.Println(\"Hello\")\n\t}\n}\n","kind":2,"languageId":"go","executionSummary":{},"metadata":{"kekseeseseseses":"lolokololoolol","hello":"world"},"outputs":[]},{"content":"package main\n\nimport (\n    \"testing\"\n)\n\n// Factorial returns a factorial of x.\nfunc Factorial(x int64) int64 {\n    if x <= 1 {\n        return 1\n    }\n\n    return x * Factorial(x - 1)\n}\n\nfunc Test_Factorial(t *testing.T) {\n    tt := []struct{\n        name string\n        x    int64\n        exp  int64\n    }{\n        {\n            name: \"zero\",\n            x:    0,\n            exp:  1,\n        },\n        {\n            name: \"five\",\n            x:    5,\n            exp:  120,\n        },\n        {\n            name: \"one\",\n            x:    1,\n            exp:  1,\n        },\n        {\n            name: \"negative\",\n            x:    -1,\n            exp:  1,\n        },\n    }\n    for _, tc := range tt {\n        t.Run(tc.name, func(t *testing.T) {\n            res := Factorial(tc.x)\n            if tc.exp != res {\n                t.Errorf(\"expected: %d, actual: %d\", tc.exp, res)\n            }\n        })\n    } \n}\n\nfunc Test_Something(t *testing.T) {\n    t.Run(\"all ok\", func(t *testing.T) {})\n\n    t.Run(\"fail: something wrong\", func(t *testing.T) {\n        t.Run(\"fail: inner something wrong\", func(t *testing.T) {\n            t.Error(\"something went wrong =/\")\n        })\n    })\n}\n","kind":2,"languageId":"go","executionSummary":{"timing":{"startTime":1637231018552,"endTime":1637231018875},"success":false},"metadata":{"execution":"go test -v {xprog}"},"outputs":[{"items":[{"data":{"type":"Buffer","data":[123,10,9,34,114,101,115,117,108,116,83,116,97,116,117,115,34,58,32,34,70,65,73,76,34,44,10,9,34,116,101,115,116,115,34,58,32,91,10,9,9,123,10,9,9,9,34,110,97,109,101,34,58,32,34,84,101,115,116,95,70,97,99,116,111,114,105,97,108,34,44,10,9,9,9,34,99,104,105,108,100,114,101,110,34,58,32,91,10,9,9,9,9,123,10,9,9,9,9,9,34,110,97,109,101,34,58,32,34,122,101,114,111,34,44,10,9,9,9,9,9,34,99,104,105,108,100,114,101,110,34,58,32,91,93,44,10,9,9,9,9,9,34,115,116,97,116,117,115,34,58,32,34,80,65,83,83,34,44,10,9,9,9,9,9,34,116,105,109,101,34,58,32,48,10,9,9,9,9,125,44,10,9,9,9,9,123,10,9,9,9,9,9,34,110,97,109,101,34,58,32,34,102,105,118,101,34,44,10,9,9,9,9,9,34,99,104,105,108,100,114,101,110,34,58,32,91,93,44,10,9,9,9,9,9,34,115,116,97,116,117,115,34,58,32,34,80,65,83,83,34,44,10,9,9,9,9,9,34,116,105,109,101,34,58,32,48,10,9,9,9,9,125,44,10,9,9,9,9,123,10,9,9,9,9,9,34,110,97,109,101,34,58,32,34,111,110,101,34,44,10,9,9,9,9,9,34,99,104,105,108,100,114,101,110,34,58,32,91,93,44,10,9,9,9,9,9,34,115,116,97,116,117,115,34,58,32,34,80,65,83,83,34,44,10,9,9,9,9,9,34,116,105,109,101,34,58,32,48,10,9,9,9,9,125,44,10,9,9,9,9,123,10,9,9,9,9,9,34,110,97,109,101,34,58,32,34,110,101,103,97,116,105,118,101,34,44,10,9,9,9,9,9,34,99,104,105,108,100,114,101,110,34,58,32,91,93,44,10,9,9,9,9,9,34,115,116,97,116,117,115,34,58,32,34,80,65,83,83,34,44,10,9,9,9,9,9,34,116,105,109,101,34,58,32,48,10,9,9,9,9,125,10,9,9,9,93,44,10,9,9,9,34,115,116,97,116,117,115,34,58,32,34,80,65,83,83,34,44,10,9,9,9,34,116,105,109,101,34,58,32,48,10,9,9,125,44,10,9,9,123,10,9,9,9,34,110,97,109,101,34,58,32,34,84,101,115,116,95,83,111,109,101,116,104,105,110,103,34,44,10,9,9,9,34,99,104,105,108,100,114,101,110,34,58,32,91,10,9,9,9,9,123,10,9,9,9,9,9,34,110,97,109,101,34,58,32,34,97,108,108,95,111,107,34,44,10,9,9,9,9,9,34,99,104,105,108,100,114,101,110,34,58,32,91,93,44,10,9,9,9,9,9,34,115,116,97,116,117,115,34,58,32,34,80,65,83,83,34,44,10,9,9,9,9,9,34,116,105,109,101,34,58,32,48,10,9,9,9,9,125,44,10,9,9,9,9,123,10,9,9,9,9,9,34,110,97,109,101,34,58,32,34,102,97,105,108,58,95,115,111,109,101,116,104,105,110,103,95,119,114,111,110,103,34,44,10,9,9,9,9,9,34,99,104,105,108,100,114,101,110,34,58,32,91,10,9,9,9,9,9,9,123,10,9,9,9,9,9,9,9,34,110,97,109,101,34,58,32,34,102,97,105,108,58,95,105,110,110,101,114,95,115,111,109,101,116,104,105,110,103,95,119,114,111,110,103,34,44,10,9,9,9,9,9,9,9,34,99,104,105,108,100,114,101,110,34,58,32,91,93,44,10,9,9,9,9,9,9,9,34,115,116,97,116,117,115,34,58,32,34,70,65,73,76,34,44,10,9,9,9,9,9,9,9,34,109,115,103,34,58,32,34,110,111,116,101,98,111,111,107,95,116,101,115,116,46,103,111,58,53,56,58,32,115,111,109,101,116,104,105,110,103,32,119,101,110,116,32,119,114,111,110,103,32,61,47,34,10,9,9,9,9,9,9,125,10,9,9,9,9,9,93,44,10,9,9,9,9,9,34,115,116,97,116,117,115,34,58,32,34,70,65,73,76,34,10,9,9,9,9,125,10,9,9,9,93,44,10,9,9,9,34,115,116,97,116,117,115,34,58,32,34,70,65,73,76,34,44,10,9,9,9,34,116,105,109,101,34,58,32,48,10,9,9,125,10,9,93,44,10,9,34,116,101,115,116,115,70,97,105,108,101,100,34,58,32,51,10,125]},"mime":"application/cellementary.test"}],"id":"19037a90-389c-4e0c-9826-2dfcefe2dfd1"}]}]