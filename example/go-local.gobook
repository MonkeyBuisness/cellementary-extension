{"cells":[{"content":"# Welcome to the `GO` notebook!","kind":1,"languageId":"markdown","metadata":{}},{"content":"This notebook has a `.gobook` file extension.\n\nTo play around with this book, we recommend that you select the `Go Local` kernel at the top right of the screen.","kind":1,"languageId":"markdown","metadata":{}},{"content":"## Here are some examples of how it works.","kind":1,"languageId":"markdown","metadata":{}},{"content":"### Example 1: Hello world application","kind":1,"languageId":"markdown","metadata":{}},{"content":"package main\n\nimport (\n\t\"fmt\"\n)\n\nfunc main() {\n\tfmt.Println(\"Hello world!\")\n}\n","kind":2,"languageId":"go","metadata":{}},{"content":"### Example 2: Output with delay","kind":1,"languageId":"markdown","metadata":{}},{"content":"package main\n\nimport (\n\t\"fmt\"\n\t\"time\"\n)\n\nfunc main() {\n\tfor i := 0; i < 5; i++ { \n\t\tfmt.Println(\"Hello!\")\n\t\ttime.Sleep(time.Second)\n\t}\n}\n","kind":2,"languageId":"go","metadata":{}},{"content":"### Example 3: Panic!","kind":1,"languageId":"markdown","metadata":{}},{"content":"package main\n\nimport (\n\t\"fmt\"\n\t\"time\"\n)\n\nfunc main() {\n\tfor i := 0; i < 5; i++ { \n\t\tfmt.Println(\"Hello!\")\n\t\ttime.Sleep(time.Second)\n\t\tif i == 1 {\n\t\t\tpanic(\"extremely unfixable error\")\n\t\t}\n\t}\n}\n","kind":2,"languageId":"go","metadata":{}},{"content":"### Example 4: Test","kind":1,"languageId":"markdown","metadata":{}},{"content":"package main\n\nimport (\n    \"testing\"\n)\n\n// Factorial returns a factorial of x.\nfunc Factorial(x int64) int64 {\n    if x <= 1 {\n        return 1\n    }\n\n    return x * Factorial(x - 1)\n}\n\nfunc Test_Factorial(t *testing.T) {\n    tt := []struct{\n        name string\n        x    int64\n        exp  int64\n    }{\n        {\n            name: \"zero\",\n            x:    0,\n            exp:  1,\n        },\n        {\n            name: \"five\",\n            x:    5,\n            exp:  120,\n        },\n        {\n            name: \"one\",\n            x:    1,\n            exp:  1,\n        },\n        {\n            name: \"negative\",\n            x:    -1,\n            exp:  1,\n        },\n    }\n    for _, tc := range tt {\n        t.Run(tc.name, func(t *testing.T) {\n            res := Factorial(tc.x)\n            if tc.exp != res {\n                t.Errorf(\"expected: %d, actual: %d\", tc.exp, res)\n            }\n        })\n    } \n}\n\nfunc Test_Something(t *testing.T) {\n    t.Run(\"all ok\", func(t *testing.T) {})\n\n    t.Run(\"fail: something wrong\", func(t *testing.T) {\n        t.Run(\"fail: inner something wrong\", func(t *testing.T) {\n            t.Error(\"something went wrong =/\")\n        })\n    })\n}\n","kind":2,"languageId":"go","metadata":{"execution":"go test -v {xprog}"}},{"content":"### Example 5: Clear","kind":1,"languageId":"markdown","metadata":{}},{"content":"// Example from https://play.golang.org/\n\npackage main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"time\"\n)\n\nfunc main() {\n\tconst col = 30\n\t// Clear the screen by printing \\x0c.\n\tbar := fmt.Sprintf(\"\\x0c[%%-%vs]\", col)\n\tfor i := 0; i < col; i++ {\n\t\tfmt.Printf(bar, strings.Repeat(\"=\", i)+\">\")\n\t\ttime.Sleep(100 * time.Millisecond)\n\t}\n\tfmt.Printf(bar+\" Done!\", strings.Repeat(\"=\", col))\n}\n","kind":2,"languageId":"go","metadata":{"easter_egg":"Enjoy!"}},{"content":"### Example 6: Syntax error","kind":1,"languageId":"markdown","metadata":{}},{"content":"package main\n\nimport (\n\t\"fmt\"\n)\n\nfunc main() {\n\tfmt.println(\"Hello!\")\n}\n","kind":2,"languageId":"go","metadata":{}},{"content":"### Example 7: Switching between `stderr` and `stdout`","kind":1,"languageId":"markdown","metadata":{}},{"content":"package main\n\nimport (\n\t\"fmt\"\n\t\"os\"\n\t\"time\"\n)\n\nfunc main() {\n\tfor i := 0; i < 10; i++ {\n\t\tif i%2 == 0 {\n\t\t\tfmt.Fprintf(os.Stderr, \"step %d: error\\n\", i + 1)\n\t\t} else {\n\t\t\tfmt.Fprintf(os.Stdout, \"step %d: no error\", i + 1)\n\t\t}\n\t\ttime.Sleep(500 * time.Millisecond)\n\t}\n}\n","kind":2,"languageId":"go","metadata":{}},{"content":"### Example 8: Reading input data","kind":1,"languageId":"markdown","metadata":{}},{"content":"package main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"math/rand\"\n\t\"os\"\n\t\"strconv\"\n\t\"strings\"\n\t\"time\"\n)\n\n// Guessing Game implementation.\nfunc main() {\n\tmin, max := 1, 100\n\trand.Seed(time.Now().UnixNano())\n\tsecret := rand.Intn(max-min) + min\n\n\tattempts := 0\n\tfor {\n\t\tfmt.Println(\"@::prompt -> Please input your guess (between 1 and 100)\")\n\n\t\tattempts++\n\t\treader := bufio.NewReader(os.Stdin)\n\t\tinput, err := reader.ReadString('\\n')\n\n\t\t// INFO: send command to cellementary to clear the output.\n\t\tfmt.Println(\"@::clear ->\")\n\t\t\n\t\tif err != nil {\n\t\t\tfmt.Printf(\"could not read input data: %v\\n\", err)\n\t\t\tcontinue\n\t\t}\n\n\t\tinput = strings.TrimSuffix(input, \"\\n\")\n\n\t\tguess, err := strconv.Atoi(input)\n\t\tif err != nil {\n\t\t\tfmt.Printf(\"could not parse input data: %v\\n\", err)\n\t\t\tcontinue\n\t\t}\n\n\t\tif guess > secret {\n\t\t\tfmt.Println(\"Your guess is bigger than the secret number. Try again\")\n\t\t\tcontinue\n\t\t}\n\t\t\n\t\tif guess < secret {\n\t\t\tfmt.Println(\"Your guess is smaller than the secret number. Try again\")\n\t\t\tcontinue\n\t\t}\n\n\t\tbreak\n\t}\n\n\tfmt.Printf(\"Congratulations! You guessed right after %d attempts \\n\", attempts)\n}\n","kind":2,"languageId":"go","metadata":{}}],"metadata":{}}