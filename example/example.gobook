[{"content":"package main\n\nimport (\n\t\"fmt\"\n)\n\nfunc main() {\n\tfmt.Println(\"Hello cells!\")\n}","kind":2,"languageId":"go","executionSummary":{"timing":{"startTime":1637149950351,"endTime":1637149951707},"success":true},"metadata":{},"outputs":[{"items":[{"data":{"type":"Buffer","data":[72,101,108,108,111,32,99,101,108,108,115,33,10]},"mime":"text/plain"}],"id":"acc72b3e-5754-482d-ae57-856e494dc933"}]},{"content":"package main\n\nimport (\n\t\"fmt\"\n\t\"time\"\n)\n\nfunc main() {\n\tfor i := 0; i < 5; i++ { \n\t\tfmt.Println(\"Hello cells!\")\n\t\ttime.Sleep(time.Second)\n\t}\n}","kind":2,"languageId":"go","executionSummary":{},"metadata":{},"outputs":[]},{"content":"package main\n\nimport (\n\t\"fmt\"\n\t\"time\"\n)\n\nfunc main() {\n\tfor i := 0; i < 5; i++ { \n\t\tfmt.Println(\"Hello cells!\")\n\t\ttime.Sleep(time.Second)\n\t\tif i == 1 {\n\t\t\tpanic(\"error\")\n\t\t}\n\t}\n}","kind":2,"languageId":"go","executionSummary":{},"metadata":{},"outputs":[]},{"content":"package main\n\nimport (\n    \"testing\"\n    \"time\"\n)\n        \n// LastIndex returns the index of the last instance of x in list, or\n// -1 if x is not present. The loop condition has a fault that\n// causes somes tests to fail. Change it to i >= 0 to see them pass.\nfunc LastIndex(list []int, x int) int {\n    for i := len(list) - 1; i > 0; i-- {\n        if list[i] == x {\n            return i\n        }\n    }\n    return -1\n}\n        \nfunc TestLastIndex(t *testing.T) {\n    tests := []struct {\n        list []int\n        x    int\n        want int\n    }{\n        {list: []int{1}, x: 1, want: -1},\n        /*{list: []int{1, 1}, x: 1, want: 1},\n        {list: []int{2, 1}, x: 2, want: 0},\n        {list: []int{1, 2, 1, 1}, x: 2, want: 1},\n        {list: []int{1, 1, 1, 2, 2, 1}, x: 3, want: -1},\n        {list: []int{3, 1, 2, 2, 1, 1}, x: 3, want: 0},*/\n    }\n    for _, tt := range tests {\n        if got := LastIndex(tt.list, tt.x); got != tt.want {\n            t.Errorf(\"LastIndex(%v, %v) = %v, want %v\", tt.list, tt.x, got, tt.want)\n        }\n    }\n}\n\nfunc TestSomething(t *testing.T) {\n    t.Run(\"test 1\", func(t *testing.T) {\n        t.Run(\"kek\", func(t *testing.T) {\n            time.Sleep(time.Second)\n        })\n    })\n\n    t.Run(\"test 2\", func(t *testing.T) {\n        t.Errorf(\"Test bla-bla\")\n    })\n}\n\n","kind":2,"languageId":"go","executionSummary":{"timing":{"startTime":1637149928368,"endTime":1637149930362},"success":false},"metadata":{},"outputs":[{"items":[{"data":{"type":"Buffer","data":[123,10,9,34,114,101,115,117,108,116,83,116,97,116,117,115,34,58,32,34,70,65,73,76,34,44,10,9,34,116,101,115,116,115,34,58,32,91,10,9,9,123,10,9,9,9,34,110,97,109,101,34,58,32,34,84,101,115,116,76,97,115,116,73,110,100,101,120,34,44,10,9,9,9,34,99,104,105,108,100,114,101,110,34,58,32,91,93,44,10,9,9,9,34,115,116,97,116,117,115,34,58,32,34,80,65,83,83,34,44,10,9,9,9,34,116,105,109,101,34,58,32,48,10,9,9,125,44,10,9,9,123,10,9,9,9,34,110,97,109,101,34,58,32,34,84,101,115,116,83,111,109,101,116,104,105,110,103,34,44,10,9,9,9,34,99,104,105,108,100,114,101,110,34,58,32,91,10,9,9,9,9,123,10,9,9,9,9,9,34,110,97,109,101,34,58,32,34,116,101,115,116,95,49,34,44,10,9,9,9,9,9,34,99,104,105,108,100,114,101,110,34,58,32,91,10,9,9,9,9,9,9,123,10,9,9,9,9,9,9,9,34,110,97,109,101,34,58,32,34,107,101,107,34,44,10,9,9,9,9,9,9,9,34,99,104,105,108,100,114,101,110,34,58,32,91,93,44,10,9,9,9,9,9,9,9,34,115,116,97,116,117,115,34,58,32,34,80,65,83,83,34,44,10,9,9,9,9,9,9,9,34,109,115,103,34,58,32,34,34,44,10,9,9,9,9,9,9,9,34,116,105,109,101,34,58,32,49,48,48,48,10,9,9,9,9,9,9,125,10,9,9,9,9,9,93,44,10,9,9,9,9,9,34,115,116,97,116,117,115,34,58,32,34,80,65,83,83,34,44,10,9,9,9,9,9,34,116,105,109,101,34,58,32,49,48,48,48,10,9,9,9,9,125,44,10,9,9,9,9,123,10,9,9,9,9,9,34,110,97,109,101,34,58,32,34,116,101,115,116,95,50,34,44,10,9,9,9,9,9,34,99,104,105,108,100,114,101,110,34,58,32,91,93,44,10,9,9,9,9,9,34,115,116,97,116,117,115,34,58,32,34,70,65,73,76,34,44,10,9,9,9,9,9,34,109,115,103,34,58,32,34,112,114,111,103,46,103,111,58,52,56,58,32,84,101,115,116,32,98,108,97,45,98,108,97,34,44,10,9,9,9,9,9,34,116,105,109,101,34,58,32,48,10,9,9,9,9,125,10,9,9,9,93,44,10,9,9,9,34,115,116,97,116,117,115,34,58,32,34,70,65,73,76,34,44,10,9,9,9,34,116,105,109,101,34,58,32,49,48,48,48,10,9,9,125,10,9,93,44,10,9,34,116,101,115,116,115,70,97,105,108,101,100,34,58,32,50,10,125]},"mime":"application/cellementary.test"}],"id":"0a7c9873-04b6-4692-a803-450d8cc7fb89"}]}]