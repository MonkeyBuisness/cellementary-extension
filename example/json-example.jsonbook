{"cells":[{"content":"# Welcome to the `JSON` notebook!","kind":1,"languageId":"markdown","metadata":{}},{"content":"This notebook has a `.jsonbook` file extension.\n\nTo play around with this book, we recommend that you select the `JSON` kernel at the top right of the screen.","kind":1,"languageId":"markdown","metadata":{}},{"content":"## Here are some examples of how it works.","kind":1,"languageId":"markdown","metadata":{}},{"content":"### Example 1: Valid JSON","kind":1,"languageId":"markdown","metadata":{}},{"content":"{\n    \"name\": \"Jack\",\n    \"age\": 30,\n    \"contactNumbers\": [\n       {\n           \"type\": \"Home\",\n           \"number\": \"123 123-123\"\n       },\n       {\n          \"type\": \"Office\",\n          \"number\": \"321 321-321\"\n       }\n    ],\n    \"spouse\": null,\n    \"favoriteSports\": [\n       \"Football\",\n       \"Cricket\"\n    ]\n }\n ","kind":2,"languageId":"json","metadata":{}},{"content":"### Example 2: Valid JSONC","kind":1,"languageId":"markdown","metadata":{}},{"content":"{\n    \"name\": \"Jack\", // name of the user\n    /*\n     * param @age is a age of the user\n     * can be between 0 and 120  \n    */\n    \"age\": 30,\n    \"contactNumbers\": [\n       {\n           \"type\": \"Home\",\n           \"number\": \"123 123-123\"\n       },\n       {\n          \"type\": \"Office\",\n          \"number\": \"321 321-321\"\n       }\n    ],\n    \"spouse\": null,\n    \"favoriteSports\": [\n       \"Football\",\n       \"Cricket\"\n    ]\n }\n ","kind":2,"languageId":"jsonc","metadata":{}},{"content":"### Example 3: Invalid JSON and JSONC","kind":1,"languageId":"markdown","metadata":{}},{"content":"[\n    \"name\": \"John\"\n]\n","kind":2,"languageId":"json","metadata":{}},{"content":"{\n    /*\n    \"hello\": \"world\"\n}\n","kind":2,"languageId":"jsonc","metadata":{}},{"content":"### Example 4: Compare JSON objects (using cell script)\n\n### Expected:\n\n```json\n{\n    \"position\": \"Java Developer\",\n    \"programming_languages\": [\"java\", \"javascript\", \"SQL\"],\n    \"details\": {\n        \"salary\": 4500,\n        \"remote\": true\n    }\n}\n```\n","kind":1,"languageId":"markdown","metadata":{}},{"content":"{\n    \"programming_languages\": [\"java\", \"javascript\", \"SQL\"],\n    \"position\": \"Java Developer\",\n    \"details\": {\n        \"remote\": true,\n        \"salary\": 4500\n    }\n}\n","kind":2,"languageId":"json","metadata":{"$script":{"kind":"javascript","code":"after = (cell, out, success) => {\n    if (!success) {\n        return;\n    }\n\n    const ts = Date.now();\n    out.clear();\n    const expResult = {\n        position: \"Java Developer\",\n        programming_languages: [\"java\", \"javascript\", \"SQL\"],\n        details: {\n            salary: 4500,\n            remote: true\n        }\n    };\n\n    const isObjEquals = isEqual(expResult, JSON.parse(cell.content));\n    out.json([{\n        testsFailed:  isObjEquals ? 0 : 1,\n        resultStatus: isObjEquals ? 'PASS' : 'FAIL',\n        tests:        [\n            {\n                name:   'JSONs are equal',\n                status: isObjEquals ? 'PASS' : 'FAIL',\n                time:   Date.now() - ts\n            }\n        ]\n    }], mimes().stdTest);\n};\n\nconst isEqual = (obj1, obj2) => {\n    const obj1Keys = Object.keys(obj1);\n    const obj2Keys = Object.keys(obj2);\n\n    if (obj1Keys.length !== obj2Keys.length) {\n        return false;\n    }\n\n    for (let objKey of obj1Keys) {\n        if (obj1[objKey] === obj2[objKey]) {\n            continue;\n        }\n\n        if (typeof obj1[objKey] === \"object\" && typeof obj2[objKey] === \"object\") {\n            if(!isEqual(obj1[objKey], obj2[objKey])) {\n                return false;\n            }\n            continue;\n        }\n\n        return false;\n    }\n\n    return true;\n};\n"}}}],"metadata":{}}