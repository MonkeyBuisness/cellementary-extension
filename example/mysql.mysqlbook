{"cells":[{"content":"# Welcome to the `MySQL` notebook!","kind":1,"languageId":"markdown","metadata":{}},{"content":"This notebook has a `.mysqlbook` file extension.\n\nTo play around with this book, we recommend that you select the `MySQL` kernel at the top right of the screen.","kind":1,"languageId":"markdown","metadata":{}},{"content":"## Here are some examples of how it works.\n\nPlease, before run these examples, update the metadata info for the notebook!","kind":1,"languageId":"markdown","metadata":{}},{"content":"### Example 1: Create 2 tables and select data from them","kind":1,"languageId":"markdown","metadata":{}},{"content":"/* create programming_languages table. */\nCREATE TABLE IF NOT EXISTS programming_languages(\n   id   int         NOT NULL AUTO_INCREMENT,\n   name varchar(36) NOT NULL,\n\n   PRIMARY KEY (id)\n);\n\n/* create tiobe_indexes table. */\nCREATE TABLE IF NOT EXISTS tiobe_indexes(\n   language_id int  NOT NULL AUTO_INCREMENT,\n   stat_date   date NOT NULL,\n   rating      real NOT NULL DEFAULT 0,\n\n   PRIMARY KEY (language_id, stat_date),\n   FOREIGN KEY (language_id) REFERENCES programming_languages(id)\n);\n\n/* clear previous data */\nDELETE FROM tiobe_indexes;\nDELETE FROM programming_languages;\n\n/* insert values into programming_languages table */\nINSERT INTO programming_languages(id, name) VALUES\n(1, 'JavaScript'),\n(2, 'SQL'),\n(3, 'Go');\n\n/* insert values into tiobe_indexes table */\n/* information obtained from: https://www.tiobe.com/tiobe-index/ */\nINSERT INTO tiobe_indexes(language_id, stat_date, rating) VALUES\n-- JavaScript\n(1, '2002-07-31', 1.15),\n(1, '2016-05-06', 2.34),\n(1, '2021-11-06', 2.66),\n-- SQL\n(2, '2001-11-28', 1.84),\n(2, '2018-02-08', 2.36),\n(2, '2021-11-06', 2.11),\n-- Go\n(3, '2010-12-07', 0.59),\n(3, '2017-04-09', 1.97),\n(3, '2021-11-06', 1.21);\n\n/* select tables data */\nSELECT p.name as 'Programming Language', MAX(t.rating) as 'Best TIOBE Rating'\nFROM programming_languages p INNER JOIN tiobe_indexes t ON p.id = t.language_id\nGROUP BY p.name\nORDER BY p.name;\n","kind":2,"languageId":"sql","metadata":{}},{"content":"### Example 2: Syntax error","kind":1,"languageId":"markdown","metadata":{}},{"content":"/* create test table. */\nCREATE TABLE IF NOT EXISTS test(\n   id   int         NOT NULL AUTOINCREMENT, /* AUTOINCREMENT must be AUTO_INCREMENT */\n   name varchar(36) NOT NULL,\n\n   PRIMARY KEY (id)\n);\n","kind":2,"languageId":"sql","metadata":{}},{"content":"### Example 3: Overwrite database name for cell (see —Åell's metadata)\nMake sure the database with name provided in the `db-name` metadata field exists on your computer!","kind":1,"languageId":"markdown","metadata":{}},{"content":"SELECT DATABASE() as 'Current Database';\n","kind":2,"languageId":"sql","metadata":{"db-name":"test"}},{"content":"### Example 4: Working with stored procedures and functions","kind":1,"languageId":"markdown","metadata":{}},{"content":"/* create cats table. */\nCREATE TABLE IF NOT EXISTS cats(\n   id    int         NOT NULL AUTO_INCREMENT,\n   name  varchar(36) NOT NULL,\n   color varchar(24) NOT NULL,\n\n   PRIMARY KEY (id)\n);\n\n/* insert values into cats table */\nDELETE FROM cats;\nINSERT INTO cats(name, color) VALUES\n('Bella', 'black'),\n('Kitty', 'white'),\n('Lily', 'white'),\n('Charlie', 'gray'),\n('Lucy', 'black'),\n('Leo', 'white'),\n('Milo', 'gray'),\n('Cleo', 'gray'),\n('Cleo', 'black'),\n('Nala', 'white');\n\n/* create stored procedure */\nDELIMITER $$\nDROP PROCEDURE IF EXISTS getCatsByColor;\nCREATE PROCEDURE getCatsByColor(color varchar(24))\nBEGIN\n    SELECT *\n    FROM cats\n    WHERE cats.color LIKE color;\nEND$$\nDELIMITER ;\n\n/* create function */\nDELIMITER $$\nDROP FUNCTION IF EXISTS allCatNames;\nCREATE FUNCTION allCatNames()\nRETURNS varchar(1024)\nDETERMINISTIC\nBEGIN\n    DECLARE catNames varchar(1024) DEFAULT '';\n    DECLARE catName varchar(36) DEFAULT '';\n    DECLARE done INTEGER DEFAULT 0;\n    DEClARE cur CURSOR FOR SELECT name FROM cats GROUP BY name;\n    DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = 1;\n    \n    OPEN cur;\n\n\tgetName: LOOP\n\t\tFETCH cur INTO catName;\n\t\tIF done = 1 THEN \n\t\t\tLEAVE getName;\n\t\tEND IF;\n\t\tSET catNames = CONCAT(catNames,catName,';');\n\tEND LOOP getName;\n\t\n    CLOSE cur;\n\n    RETURN catNames;\nEND$$\nDELIMITER ;\n\n/* call stored procedure */\ncall getCatsByColor('white');\ncall getCatsByColor('gray');\n\n/* call function */\nSELECT allCatNames() as 'All Cat Names';\n","kind":2,"languageId":"sql","metadata":{}}],"metadata":{"db-name":"example","db-pass":"12345678"}}